//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from src/Redstar.Parse/Redstar.g4 by ANTLR 4.9.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Redstar.Parse {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.3")]
[System.CLSCompliant(false)]
public partial class RedstarParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, STRINGLIT=28, INT=29, OP=30, IDENT=31, WS=32, 
		COMMENT=33;
	public const int
		RULE_start = 0, RULE_statement = 1, RULE_attrDecl = 2, RULE_annoDecl = 3, 
		RULE_bindDecl = 4, RULE_bindAnnoConstraint = 5, RULE_bindAnnoLists = 6, 
		RULE_bindAnnoAttrList = 7, RULE_funcDecl = 8, RULE_funcParameters = 9, 
		RULE_funcParameter = 10, RULE_funcReturn = 11, RULE_body = 12, RULE_ifStmt = 13, 
		RULE_attrAppl = 14, RULE_exp = 15, RULE_binaryExp = 16, RULE_term = 17, 
		RULE_varDefine = 18, RULE_attrList = 19, RULE_funcCall = 20, RULE_operands = 21, 
		RULE_returnStmt = 22, RULE_literal = 23, RULE_literalString = 24, RULE_literalInt = 25, 
		RULE_literalDecimal = 26, RULE_typename = 27, RULE_ident = 28, RULE_op = 29;
	public static readonly string[] ruleNames = {
		"start", "statement", "attrDecl", "annoDecl", "bindDecl", "bindAnnoConstraint", 
		"bindAnnoLists", "bindAnnoAttrList", "funcDecl", "funcParameters", "funcParameter", 
		"funcReturn", "body", "ifStmt", "attrAppl", "exp", "binaryExp", "term", 
		"varDefine", "attrList", "funcCall", "operands", "returnStmt", "literal", 
		"literalString", "literalInt", "literalDecimal", "typename", "ident", 
		"op"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'attr'", "'anno'", "'_'", "'=>'", "'bind'", "'any'", "'all'", 
		"'none'", "','", "'func'", "'('", "')'", "':'", "'{'", "'}'", "'if'", 
		"'else'", "'['", "'-'", "']'", "'='", "'return'", "'e'", "'.'", "'int'", 
		"'string'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "STRINGLIT", "INT", "OP", "IDENT", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Redstar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static RedstarParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RedstarParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RedstarParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__10) | (1L << T__14) | (1L << T__16) | (1L << T__18) | (1L << T__22) | (1L << IDENT))) != 0)) {
				{
				{
				State = 60;
				statement();
				}
				}
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrDeclContext attrDecl() {
			return GetRuleContext<AttrDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindDeclContext bindDecl() {
			return GetRuleContext<BindDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AnnoDeclContext annoDecl() {
			return GetRuleContext<AnnoDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncDeclContext funcDecl() {
			return GetRuleContext<FuncDeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStmtContext ifStmt() {
			return GetRuleContext<IfStmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefineContext varDefine() {
			return GetRuleContext<VarDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrApplContext attrAppl() {
			return GetRuleContext<AttrApplContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStmtContext returnStmt() {
			return GetRuleContext<ReturnStmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 84;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66;
				attrDecl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 67;
				bindDecl();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 68;
				annoDecl();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 69;
				funcDecl();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 70;
				ifStmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 71;
				body();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 72;
				varDefine();
				State = 73;
				Match(T__0);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 75;
				funcCall();
				State = 76;
				Match(T__0);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 78;
				attrAppl();
				State = 79;
				Match(T__0);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 81;
				returnStmt();
				State = 82;
				Match(T__0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public AttrDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterAttrDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitAttrDecl(this);
		}
	}

	[RuleVersion(0)]
	public AttrDeclContext attrDecl() {
		AttrDeclContext _localctx = new AttrDeclContext(Context, State);
		EnterRule(_localctx, 4, RULE_attrDecl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			Match(T__1);
			State = 87;
			ident();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnoDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoConstraintContext bindAnnoConstraint() {
			return GetRuleContext<BindAnnoConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoListsContext bindAnnoLists() {
			return GetRuleContext<BindAnnoListsContext>(0);
		}
		public AnnoDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annoDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterAnnoDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitAnnoDecl(this);
		}
	}

	[RuleVersion(0)]
	public AnnoDeclContext annoDecl() {
		AnnoDeclContext _localctx = new AnnoDeclContext(Context, State);
		EnterRule(_localctx, 6, RULE_annoDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(T__2);
			State = 93;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				{
				State = 90;
				Match(T__3);
				}
				break;
			case IDENT:
				{
				State = 91;
				ident();
				}
				break;
			case OP:
				{
				State = 92;
				op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 95;
			bindAnnoConstraint();
			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 96;
				Match(T__4);
				State = 97;
				bindAnnoLists();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoConstraintContext bindAnnoConstraint() {
			return GetRuleContext<BindAnnoConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoListsContext bindAnnoLists() {
			return GetRuleContext<BindAnnoListsContext>(0);
		}
		public BindDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterBindDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitBindDecl(this);
		}
	}

	[RuleVersion(0)]
	public BindDeclContext bindDecl() {
		BindDeclContext _localctx = new BindDeclContext(Context, State);
		EnterRule(_localctx, 8, RULE_bindDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(T__5);
			State = 104;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
				{
				State = 101;
				Match(T__3);
				}
				break;
			case IDENT:
				{
				State = 102;
				ident();
				}
				break;
			case OP:
				{
				State = 103;
				op();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 106;
			bindAnnoConstraint();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__4) {
				{
				State = 107;
				Match(T__4);
				State = 108;
				bindAnnoLists();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindAnnoConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoListsContext bindAnnoLists() {
			return GetRuleContext<BindAnnoListsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoAttrListContext bindAnnoAttrList() {
			return GetRuleContext<BindAnnoAttrListContext>(0);
		}
		public BindAnnoConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindAnnoConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterBindAnnoConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitBindAnnoConstraint(this);
		}
	}

	[RuleVersion(0)]
	public BindAnnoConstraintContext bindAnnoConstraint() {
		BindAnnoConstraintContext _localctx = new BindAnnoConstraintContext(Context, State);
		EnterRule(_localctx, 10, RULE_bindAnnoConstraint);
		try {
			State = 118;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__3:
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111;
				bindAnnoLists();
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				Match(T__6);
				State = 113;
				bindAnnoAttrList();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 3);
				{
				State = 114;
				Match(T__7);
				State = 115;
				bindAnnoAttrList();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 4);
				{
				State = 116;
				Match(T__8);
				State = 117;
				bindAnnoAttrList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindAnnoListsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoAttrListContext[] bindAnnoAttrList() {
			return GetRuleContexts<BindAnnoAttrListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BindAnnoAttrListContext bindAnnoAttrList(int i) {
			return GetRuleContext<BindAnnoAttrListContext>(i);
		}
		public BindAnnoListsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindAnnoLists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterBindAnnoLists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitBindAnnoLists(this);
		}
	}

	[RuleVersion(0)]
	public BindAnnoListsContext bindAnnoLists() {
		BindAnnoListsContext _localctx = new BindAnnoListsContext(Context, State);
		EnterRule(_localctx, 12, RULE_bindAnnoLists);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			bindAnnoAttrList();
			State = 125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 121;
				Match(T__9);
				State = 122;
				bindAnnoAttrList();
				}
				}
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BindAnnoAttrListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AttrListContext attrList() {
			return GetRuleContext<AttrListContext>(0);
		}
		public BindAnnoAttrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bindAnnoAttrList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterBindAnnoAttrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitBindAnnoAttrList(this);
		}
	}

	[RuleVersion(0)]
	public BindAnnoAttrListContext bindAnnoAttrList() {
		BindAnnoAttrListContext _localctx = new BindAnnoAttrListContext(Context, State);
		EnterRule(_localctx, 14, RULE_bindAnnoAttrList);
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__18:
				EnterOuterAlt(_localctx, 1);
				{
				State = 128;
				attrList();
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 129;
				Match(T__3);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncDeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParametersContext funcParameters() {
			return GetRuleContext<FuncParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncReturnContext funcReturn() {
			return GetRuleContext<FuncReturnContext>(0);
		}
		public FuncDeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcDecl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterFuncDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitFuncDecl(this);
		}
	}

	[RuleVersion(0)]
	public FuncDeclContext funcDecl() {
		FuncDeclContext _localctx = new FuncDeclContext(Context, State);
		EnterRule(_localctx, 16, RULE_funcDecl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132;
			Match(T__10);
			State = 133;
			ident();
			State = 134;
			Match(T__11);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENT) {
				{
				State = 135;
				funcParameters();
				}
			}

			State = 138;
			Match(T__12);
			State = 140;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__25) | (1L << T__26) | (1L << IDENT))) != 0)) {
				{
				State = 139;
				funcReturn();
				}
			}

			State = 142;
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FuncParameterContext[] funcParameter() {
			return GetRuleContexts<FuncParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncParameterContext funcParameter(int i) {
			return GetRuleContext<FuncParameterContext>(i);
		}
		public FuncParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterFuncParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitFuncParameters(this);
		}
	}

	[RuleVersion(0)]
	public FuncParametersContext funcParameters() {
		FuncParametersContext _localctx = new FuncParametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_funcParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			funcParameter();
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 145;
				Match(T__9);
				State = 146;
				funcParameter();
				}
				}
				State = 151;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		public FuncParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterFuncParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitFuncParameter(this);
		}
	}

	[RuleVersion(0)]
	public FuncParameterContext funcParameter() {
		FuncParameterContext _localctx = new FuncParameterContext(Context, State);
		EnterRule(_localctx, 20, RULE_funcParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			ident();
			State = 153;
			Match(T__13);
			State = 154;
			typename();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext[] typename() {
			return GetRuleContexts<TypenameContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename(int i) {
			return GetRuleContext<TypenameContext>(i);
		}
		public FuncReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcReturn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterFuncReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitFuncReturn(this);
		}
	}

	[RuleVersion(0)]
	public FuncReturnContext funcReturn() {
		FuncReturnContext _localctx = new FuncReturnContext(Context, State);
		EnterRule(_localctx, 22, RULE_funcReturn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 156;
			typename();
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 157;
				Match(T__9);
				State = 158;
				typename();
				}
				}
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 24, RULE_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164;
			Match(T__14);
			State = 168;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__5) | (1L << T__10) | (1L << T__14) | (1L << T__16) | (1L << T__18) | (1L << T__22) | (1L << IDENT))) != 0)) {
				{
				{
				State = 165;
				statement();
				}
				}
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 171;
			Match(T__15);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext[] body() {
			return GetRuleContexts<BodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BodyContext body(int i) {
			return GetRuleContext<BodyContext>(i);
		}
		public IfStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterIfStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitIfStmt(this);
		}
	}

	[RuleVersion(0)]
	public IfStmtContext ifStmt() {
		IfStmtContext _localctx = new IfStmtContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifStmt);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			Match(T__16);
			State = 174;
			exp();
			State = 175;
			body();
			State = 183;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 176;
					Match(T__17);
					State = 177;
					Match(T__16);
					State = 178;
					exp();
					State = 179;
					body();
					}
					} 
				}
				State = 185;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			State = 188;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__17) {
				{
				State = 186;
				Match(T__17);
				State = 187;
				body();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrApplContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public AttrApplContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrAppl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterAttrAppl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitAttrAppl(this);
		}
	}

	[RuleVersion(0)]
	public AttrApplContext attrAppl() {
		AttrApplContext _localctx = new AttrApplContext(Context, State);
		EnterRule(_localctx, 28, RULE_attrAppl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 190;
			Match(T__18);
			State = 192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 191;
				Match(T__19);
				}
			}

			State = 194;
			ident();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 195;
				Match(T__9);
				State = 197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__19) {
					{
					State = 196;
					Match(T__19);
					}
				}

				State = 199;
				ident();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 205;
			Match(T__20);
			State = 206;
			ident();
			State = 211;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 207;
				Match(T__9);
				State = 208;
				ident();
				}
				}
				State = 213;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BinaryExpContext binaryExp() {
			return GetRuleContext<BinaryExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public ExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitExp(this);
		}
	}

	[RuleVersion(0)]
	public ExpContext exp() {
		ExpContext _localctx = new ExpContext(Context, State);
		EnterRule(_localctx, 30, RULE_exp);
		try {
			State = 216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				binaryExp();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				term();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryExpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OpContext op() {
			return GetRuleContext<OpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public BinaryExpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryExp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterBinaryExp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitBinaryExp(this);
		}
	}

	[RuleVersion(0)]
	public BinaryExpContext binaryExp() {
		BinaryExpContext _localctx = new BinaryExpContext(Context, State);
		EnterRule(_localctx, 32, RULE_binaryExp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			term();
			State = 219;
			op();
			State = 220;
			exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VarDefineContext varDefine() {
			return GetRuleContext<VarDefineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FuncCallContext funcCall() {
			return GetRuleContext<FuncCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 34, RULE_term);
		try {
			State = 233;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 222;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 223;
				Match(T__11);
				State = 224;
				varDefine();
				State = 225;
				Match(T__12);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 227;
				funcCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 228;
				ident();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 229;
				Match(T__11);
				State = 230;
				exp();
				State = 231;
				Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarDefineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypenameContext typename() {
			return GetRuleContext<TypenameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttrListContext attrList() {
			return GetRuleContext<AttrListContext>(0);
		}
		public VarDefineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varDefine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterVarDefine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitVarDefine(this);
		}
	}

	[RuleVersion(0)]
	public VarDefineContext varDefine() {
		VarDefineContext _localctx = new VarDefineContext(Context, State);
		EnterRule(_localctx, 36, RULE_varDefine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235;
			ident();
			State = 236;
			Match(T__13);
			State = 241;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__18) | (1L << T__25) | (1L << T__26) | (1L << IDENT))) != 0)) {
				{
				State = 238;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__18) {
					{
					State = 237;
					attrList();
					}
				}

				State = 240;
				typename();
				}
			}

			State = 243;
			Match(T__21);
			State = 244;
			exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttrListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext[] ident() {
			return GetRuleContexts<IdentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident(int i) {
			return GetRuleContext<IdentContext>(i);
		}
		public AttrListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attrList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterAttrList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitAttrList(this);
		}
	}

	[RuleVersion(0)]
	public AttrListContext attrList() {
		AttrListContext _localctx = new AttrListContext(Context, State);
		EnterRule(_localctx, 38, RULE_attrList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246;
			Match(T__18);
			State = 247;
			ident();
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 248;
				Match(T__9);
				State = 249;
				ident();
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 255;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OperandsContext operands() {
			return GetRuleContext<OperandsContext>(0);
		}
		public FuncCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterFuncCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitFuncCall(this);
		}
	}

	[RuleVersion(0)]
	public FuncCallContext funcCall() {
		FuncCallContext _localctx = new FuncCallContext(Context, State);
		EnterRule(_localctx, 40, RULE_funcCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257;
			ident();
			State = 258;
			Match(T__11);
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__11) | (1L << STRINGLIT) | (1L << INT) | (1L << IDENT))) != 0)) {
				{
				State = 259;
				operands();
				}
			}

			State = 262;
			Match(T__12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext[] exp() {
			return GetRuleContexts<ExpContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp(int i) {
			return GetRuleContext<ExpContext>(i);
		}
		public OperandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterOperands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitOperands(this);
		}
	}

	[RuleVersion(0)]
	public OperandsContext operands() {
		OperandsContext _localctx = new OperandsContext(Context, State);
		EnterRule(_localctx, 42, RULE_operands);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264;
			exp();
			State = 269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9) {
				{
				{
				State = 265;
				Match(T__9);
				State = 266;
				exp();
				}
				}
				State = 271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpContext exp() {
			return GetRuleContext<ExpContext>(0);
		}
		public ReturnStmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterReturnStmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitReturnStmt(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStmtContext returnStmt() {
		ReturnStmtContext _localctx = new ReturnStmtContext(Context, State);
		EnterRule(_localctx, 44, RULE_returnStmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272;
			Match(T__22);
			State = 273;
			exp();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralStringContext literalString() {
			return GetRuleContext<LiteralStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralIntContext literalInt() {
			return GetRuleContext<LiteralIntContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LiteralDecimalContext literalDecimal() {
			return GetRuleContext<LiteralDecimalContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_literal);
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275;
				literalString();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276;
				literalInt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 277;
				literalDecimal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRINGLIT() { return GetToken(RedstarParser.STRINGLIT, 0); }
		public LiteralStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterLiteralString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitLiteralString(this);
		}
	}

	[RuleVersion(0)]
	public LiteralStringContext literalString() {
		LiteralStringContext _localctx = new LiteralStringContext(Context, State);
		EnterRule(_localctx, 48, RULE_literalString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 280;
			Match(STRINGLIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralIntContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(RedstarParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(RedstarParser.INT, i);
		}
		public LiteralIntContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalInt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterLiteralInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitLiteralInt(this);
		}
	}

	[RuleVersion(0)]
	public LiteralIntContext literalInt() {
		LiteralIntContext _localctx = new LiteralIntContext(Context, State);
		EnterRule(_localctx, 50, RULE_literalInt);
		int _la;
		try {
			State = 301;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 282;
				Match(INT);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23) {
					{
					State = 283;
					Match(T__23);
					State = 285;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__19) {
						{
						State = 284;
						Match(T__19);
						}
					}

					State = 287;
					Match(INT);
					}
				}

				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 290;
				Match(T__11);
				State = 291;
				Match(T__19);
				State = 292;
				Match(INT);
				State = 298;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23) {
					{
					State = 293;
					Match(T__23);
					State = 295;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__19) {
						{
						State = 294;
						Match(T__19);
						}
					}

					State = 297;
					Match(INT);
					}
				}

				State = 300;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralDecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT() { return GetTokens(RedstarParser.INT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT(int i) {
			return GetToken(RedstarParser.INT, i);
		}
		public LiteralDecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalDecimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterLiteralDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitLiteralDecimal(this);
		}
	}

	[RuleVersion(0)]
	public LiteralDecimalContext literalDecimal() {
		LiteralDecimalContext _localctx = new LiteralDecimalContext(Context, State);
		EnterRule(_localctx, 52, RULE_literalDecimal);
		int _la;
		try {
			State = 326;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 303;
				Match(INT);
				State = 304;
				Match(T__24);
				State = 305;
				Match(INT);
				State = 311;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23) {
					{
					State = 306;
					Match(T__23);
					State = 308;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__19) {
						{
						State = 307;
						Match(T__19);
						}
					}

					State = 310;
					Match(INT);
					}
				}

				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 313;
				Match(T__11);
				State = 314;
				Match(T__19);
				State = 315;
				Match(INT);
				State = 316;
				Match(T__24);
				State = 317;
				Match(INT);
				State = 323;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__23) {
					{
					State = 318;
					Match(T__23);
					State = 320;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==T__19) {
						{
						State = 319;
						Match(T__19);
						}
					}

					State = 322;
					Match(INT);
					}
				}

				State = 325;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypenameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentContext ident() {
			return GetRuleContext<IdentContext>(0);
		}
		public TypenameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typename; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterTypename(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitTypename(this);
		}
	}

	[RuleVersion(0)]
	public TypenameContext typename() {
		TypenameContext _localctx = new TypenameContext(Context, State);
		EnterRule(_localctx, 54, RULE_typename);
		try {
			State = 331;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__25:
				EnterOuterAlt(_localctx, 1);
				{
				State = 328;
				Match(T__25);
				}
				break;
			case T__26:
				EnterOuterAlt(_localctx, 2);
				{
				State = 329;
				Match(T__26);
				}
				break;
			case IDENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 330;
				ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENT() { return GetToken(RedstarParser.IDENT, 0); }
		public IdentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
	}

	[RuleVersion(0)]
	public IdentContext ident() {
		IdentContext _localctx = new IdentContext(Context, State);
		EnterRule(_localctx, 56, RULE_ident);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 333;
			Match(IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OP() { return GetToken(RedstarParser.OP, 0); }
		public OpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.EnterOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IRedstarListener typedListener = listener as IRedstarListener;
			if (typedListener != null) typedListener.ExitOp(this);
		}
	}

	[RuleVersion(0)]
	public OpContext op() {
		OpContext _localctx = new OpContext(Context, State);
		EnterRule(_localctx, 58, RULE_op);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 335;
			Match(OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '#', '\x154', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x3', 
		'\x2', '\a', '\x2', '@', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x43', 
		'\v', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 'W', '\n', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '`', '\n', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x65', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'k', '\n', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'p', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'y', '\n', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '~', '\n', '\b', '\f', '\b', 
		'\xE', '\b', '\x81', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x5', '\t', 
		'\x85', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x8B', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'\x8F', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\a', '\v', '\x96', '\n', '\v', '\f', '\v', '\xE', '\v', 
		'\x99', '\v', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\xA2', '\n', '\r', 
		'\f', '\r', '\xE', '\r', '\xA5', '\v', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\xA9', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xAC', '\v', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\a', '\xF', '\xB8', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xBB', 
		'\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\xBF', '\n', '\xF', 
		'\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC3', '\n', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\xC8', '\n', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\xCB', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xCE', '\v', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\a', '\x10', '\xD4', '\n', '\x10', '\f', '\x10', '\xE', 
		'\x10', '\xD7', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', 
		'\xDB', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x5', '\x13', '\xEC', '\n', '\x13', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xF1', '\n', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xF4', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\a', '\x15', '\xFD', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\x100', 
		'\v', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\x5', '\x16', '\x107', '\n', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\x10E', 
		'\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x111', '\v', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x5', '\x19', '\x119', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x120', '\n', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x123', '\n', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x12A', '\n', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x12D', '\n', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x130', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x137', 
		'\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x13A', '\n', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x143', '\n', '\x1C', '\x3', '\x1C', 
		'\x5', '\x1C', '\x146', '\n', '\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x149', 
		'\n', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', 
		'\x14E', '\n', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x2', '\x2', ' ', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x36', 
		'\x38', ':', '<', '\x2', '\x2', '\x2', '\x16D', '\x2', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x4', 'V', '\x3', '\x2', '\x2', '\x2', '\x6', 'X', 
		'\x3', '\x2', '\x2', '\x2', '\b', '[', '\x3', '\x2', '\x2', '\x2', '\n', 
		'\x66', '\x3', '\x2', '\x2', '\x2', '\f', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'z', '\x3', '\x2', '\x2', '\x2', '\x10', '\x84', '\x3', '\x2', 
		'\x2', '\x2', '\x12', '\x86', '\x3', '\x2', '\x2', '\x2', '\x14', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x16', '\x9A', '\x3', '\x2', '\x2', '\x2', 
		'\x18', '\x9E', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '\x1C', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xC0', 
		'\x3', '\x2', '\x2', '\x2', ' ', '\xDA', '\x3', '\x2', '\x2', '\x2', '\"', 
		'\xDC', '\x3', '\x2', '\x2', '\x2', '$', '\xEB', '\x3', '\x2', '\x2', 
		'\x2', '&', '\xED', '\x3', '\x2', '\x2', '\x2', '(', '\xF8', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x103', '\x3', '\x2', '\x2', '\x2', ',', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x112', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x118', '\x3', '\x2', '\x2', '\x2', '\x32', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x36', '\x148', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		':', '\x14F', '\x3', '\x2', '\x2', '\x2', '<', '\x151', '\x3', '\x2', 
		'\x2', '\x2', '>', '@', '\x5', '\x4', '\x3', '\x2', '?', '>', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x43', '\x3', '\x2', '\x2', '\x2', '\x41', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x41', '\x42', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x44', 'W', '\x5', '\x6', '\x4', '\x2', '\x45', 'W', '\x5', '\n', 
		'\x6', '\x2', '\x46', 'W', '\x5', '\b', '\x5', '\x2', 'G', 'W', '\x5', 
		'\x12', '\n', '\x2', 'H', 'W', '\x5', '\x1C', '\xF', '\x2', 'I', 'W', 
		'\x5', '\x1A', '\xE', '\x2', 'J', 'K', '\x5', '&', '\x14', '\x2', 'K', 
		'L', '\a', '\x3', '\x2', '\x2', 'L', 'W', '\x3', '\x2', '\x2', '\x2', 
		'M', 'N', '\x5', '*', '\x16', '\x2', 'N', 'O', '\a', '\x3', '\x2', '\x2', 
		'O', 'W', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x5', '\x1E', '\x10', 
		'\x2', 'Q', 'R', '\a', '\x3', '\x2', '\x2', 'R', 'W', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\x5', '.', '\x18', '\x2', 'T', 'U', '\a', '\x3', '\x2', 
		'\x2', 'U', 'W', '\x3', '\x2', '\x2', '\x2', 'V', '\x44', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x45', '\x3', '\x2', '\x2', '\x2', 'V', '\x46', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'G', '\x3', '\x2', '\x2', '\x2', 'V', 'H', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'I', '\x3', '\x2', '\x2', '\x2', 'V', 'J', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'M', '\x3', '\x2', '\x2', '\x2', 'V', 'P', '\x3', 
		'\x2', '\x2', '\x2', 'V', 'S', '\x3', '\x2', '\x2', '\x2', 'W', '\x5', 
		'\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x4', '\x2', '\x2', 'Y', 
		'Z', '\x5', ':', '\x1E', '\x2', 'Z', '\a', '\x3', '\x2', '\x2', '\x2', 
		'[', '_', '\a', '\x5', '\x2', '\x2', '\\', '`', '\a', '\x6', '\x2', '\x2', 
		']', '`', '\x5', ':', '\x1E', '\x2', '^', '`', '\x5', '<', '\x1F', '\x2', 
		'_', '\\', '\x3', '\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', 
		'\x2', '_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', 
		'\x2', '\x2', '\x61', '\x64', '\x5', '\f', '\a', '\x2', '\x62', '\x63', 
		'\a', '\a', '\x2', '\x2', '\x63', '\x65', '\x5', '\xE', '\b', '\x2', '\x64', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '\x65', '\t', '\x3', '\x2', '\x2', '\x2', '\x66', 'j', '\a', '\b', 
		'\x2', '\x2', 'g', 'k', '\a', '\x6', '\x2', '\x2', 'h', 'k', '\x5', ':', 
		'\x1E', '\x2', 'i', 'k', '\x5', '<', '\x1F', '\x2', 'j', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'j', 'i', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 'l', 'o', '\x5', '\f', 
		'\a', '\x2', 'm', 'n', '\a', '\a', '\x2', '\x2', 'n', 'p', '\x5', '\xE', 
		'\b', '\x2', 'o', 'm', '\x3', '\x2', '\x2', '\x2', 'o', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\v', '\x3', '\x2', '\x2', '\x2', 'q', 'y', '\x5', 
		'\xE', '\b', '\x2', 'r', 's', '\a', '\t', '\x2', '\x2', 's', 'y', '\x5', 
		'\x10', '\t', '\x2', 't', 'u', '\a', '\n', '\x2', '\x2', 'u', 'y', '\x5', 
		'\x10', '\t', '\x2', 'v', 'w', '\a', '\v', '\x2', '\x2', 'w', 'y', '\x5', 
		'\x10', '\t', '\x2', 'x', 'q', '\x3', '\x2', '\x2', '\x2', 'x', 'r', '\x3', 
		'\x2', '\x2', '\x2', 'x', 't', '\x3', '\x2', '\x2', '\x2', 'x', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'y', '\r', '\x3', '\x2', '\x2', '\x2', 'z', '\x7F', 
		'\x5', '\x10', '\t', '\x2', '{', '|', '\a', '\f', '\x2', '\x2', '|', '~', 
		'\x5', '\x10', '\t', '\x2', '}', '{', '\x3', '\x2', '\x2', '\x2', '~', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x7F', '}', '\x3', '\x2', '\x2', 
		'\x2', '\x7F', '\x80', '\x3', '\x2', '\x2', '\x2', '\x80', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x81', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', 
		'\x85', '\x5', '(', '\x15', '\x2', '\x83', '\x85', '\a', '\x6', '\x2', 
		'\x2', '\x84', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x83', '\x3', 
		'\x2', '\x2', '\x2', '\x85', '\x11', '\x3', '\x2', '\x2', '\x2', '\x86', 
		'\x87', '\a', '\r', '\x2', '\x2', '\x87', '\x88', '\x5', ':', '\x1E', 
		'\x2', '\x88', '\x8A', '\a', '\xE', '\x2', '\x2', '\x89', '\x8B', '\x5', 
		'\x14', '\v', '\x2', '\x8A', '\x89', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8E', '\a', '\xF', '\x2', '\x2', '\x8D', '\x8F', '\x5', 
		'\x18', '\r', '\x2', '\x8E', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\x3', '\x2', '\x2', '\x2', '\x8F', '\x90', '\x3', '\x2', '\x2', 
		'\x2', '\x90', '\x91', '\x5', '\x1A', '\xE', '\x2', '\x91', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x97', '\x5', '\x16', '\f', '\x2', '\x93', 
		'\x94', '\a', '\f', '\x2', '\x2', '\x94', '\x96', '\x5', '\x16', '\f', 
		'\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', '\x99', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x97', 
		'\x98', '\x3', '\x2', '\x2', '\x2', '\x98', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x97', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x5', 
		':', '\x1E', '\x2', '\x9B', '\x9C', '\a', '\x10', '\x2', '\x2', '\x9C', 
		'\x9D', '\x5', '\x38', '\x1D', '\x2', '\x9D', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\xA3', '\x5', '\x38', '\x1D', '\x2', '\x9F', '\xA0', '\a', 
		'\f', '\x2', '\x2', '\xA0', '\xA2', '\x5', '\x38', '\x1D', '\x2', '\xA1', 
		'\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA1', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA4', '\x19', '\x3', '\x2', '\x2', '\x2', '\xA5', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xAA', '\a', '\x11', '\x2', 
		'\x2', '\xA7', '\xA9', '\x5', '\x4', '\x3', '\x2', '\xA8', '\xA7', '\x3', 
		'\x2', '\x2', '\x2', '\xA9', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xA8', '\x3', '\x2', '\x2', '\x2', '\xAA', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\xAB', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', 
		'\x2', '\x2', '\x2', '\xAD', '\xAE', '\a', '\x12', '\x2', '\x2', '\xAE', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', '\x13', '\x2', 
		'\x2', '\xB0', '\xB1', '\x5', ' ', '\x11', '\x2', '\xB1', '\xB9', '\x5', 
		'\x1A', '\xE', '\x2', '\xB2', '\xB3', '\a', '\x14', '\x2', '\x2', '\xB3', 
		'\xB4', '\a', '\x13', '\x2', '\x2', '\xB4', '\xB5', '\x5', ' ', '\x11', 
		'\x2', '\xB5', '\xB6', '\x5', '\x1A', '\xE', '\x2', '\xB6', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xB9', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '\xB9', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBA', '\xBE', '\x3', 
		'\x2', '\x2', '\x2', '\xBB', '\xB9', '\x3', '\x2', '\x2', '\x2', '\xBC', 
		'\xBD', '\a', '\x14', '\x2', '\x2', '\xBD', '\xBF', '\x5', '\x1A', '\xE', 
		'\x2', '\xBE', '\xBC', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\xBF', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC2', '\a', '\x15', '\x2', '\x2', '\xC1', '\xC3', '\a', '\x16', '\x2', 
		'\x2', '\xC2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', 
		'\xCC', '\x5', ':', '\x1E', '\x2', '\xC5', '\xC7', '\a', '\f', '\x2', 
		'\x2', '\xC6', '\xC8', '\a', '\x16', '\x2', '\x2', '\xC7', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC7', '\xC8', '\x3', '\x2', '\x2', '\x2', '\xC8', 
		'\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', '\xCB', '\x5', ':', '\x1E', 
		'\x2', '\xCA', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xCB', '\xCE', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xCE', '\xCC', '\x3', '\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', 
		'\x17', '\x2', '\x2', '\xD0', '\xD5', '\x5', ':', '\x1E', '\x2', '\xD1', 
		'\xD2', '\a', '\f', '\x2', '\x2', '\xD2', '\xD4', '\x5', ':', '\x1E', 
		'\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD5', 
		'\xD6', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDB', '\x5', 
		'\"', '\x12', '\x2', '\xD9', '\xDB', '\x5', '$', '\x13', '\x2', '\xDA', 
		'\xD8', '\x3', '\x2', '\x2', '\x2', '\xDA', '\xD9', '\x3', '\x2', '\x2', 
		'\x2', '\xDB', '!', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x5', 
		'$', '\x13', '\x2', '\xDD', '\xDE', '\x5', '<', '\x1F', '\x2', '\xDE', 
		'\xDF', '\x5', ' ', '\x11', '\x2', '\xDF', '#', '\x3', '\x2', '\x2', '\x2', 
		'\xE0', '\xEC', '\x5', '\x30', '\x19', '\x2', '\xE1', '\xE2', '\a', '\xE', 
		'\x2', '\x2', '\xE2', '\xE3', '\x5', '&', '\x14', '\x2', '\xE3', '\xE4', 
		'\a', '\xF', '\x2', '\x2', '\xE4', '\xEC', '\x3', '\x2', '\x2', '\x2', 
		'\xE5', '\xEC', '\x5', '*', '\x16', '\x2', '\xE6', '\xEC', '\x5', ':', 
		'\x1E', '\x2', '\xE7', '\xE8', '\a', '\xE', '\x2', '\x2', '\xE8', '\xE9', 
		'\x5', ' ', '\x11', '\x2', '\xE9', '\xEA', '\a', '\xF', '\x2', '\x2', 
		'\xEA', '\xEC', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE0', '\x3', '\x2', 
		'\x2', '\x2', '\xEB', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xEB', '\xE5', 
		'\x3', '\x2', '\x2', '\x2', '\xEB', '\xE6', '\x3', '\x2', '\x2', '\x2', 
		'\xEB', '\xE7', '\x3', '\x2', '\x2', '\x2', '\xEC', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xED', '\xEE', '\x5', ':', '\x1E', '\x2', '\xEE', '\xF3', 
		'\a', '\x10', '\x2', '\x2', '\xEF', '\xF1', '\x5', '(', '\x15', '\x2', 
		'\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', 
		'\x2', '\x2', '\xF1', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF4', 
		'\x5', '\x38', '\x1D', '\x2', '\xF3', '\xF0', '\x3', '\x2', '\x2', '\x2', 
		'\xF3', '\xF4', '\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', 
		'\x2', '\x2', '\xF5', '\xF6', '\a', '\x18', '\x2', '\x2', '\xF6', '\xF7', 
		'\x5', ' ', '\x11', '\x2', '\xF7', '\'', '\x3', '\x2', '\x2', '\x2', '\xF8', 
		'\xF9', '\a', '\x15', '\x2', '\x2', '\xF9', '\xFE', '\x5', ':', '\x1E', 
		'\x2', '\xFA', '\xFB', '\a', '\f', '\x2', '\x2', '\xFB', '\xFD', '\x5', 
		':', '\x1E', '\x2', '\xFC', '\xFA', '\x3', '\x2', '\x2', '\x2', '\xFD', 
		'\x100', '\x3', '\x2', '\x2', '\x2', '\xFE', '\xFC', '\x3', '\x2', '\x2', 
		'\x2', '\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\x101', '\x3', 
		'\x2', '\x2', '\x2', '\x100', '\xFE', '\x3', '\x2', '\x2', '\x2', '\x101', 
		'\x102', '\a', '\x17', '\x2', '\x2', '\x102', ')', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x5', ':', '\x1E', '\x2', '\x104', '\x106', 
		'\a', '\xE', '\x2', '\x2', '\x105', '\x107', '\x5', ',', '\x17', '\x2', 
		'\x106', '\x105', '\x3', '\x2', '\x2', '\x2', '\x106', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x107', '\x108', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x109', '\a', '\xF', '\x2', '\x2', '\x109', '+', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x10F', '\x5', ' ', '\x11', '\x2', '\x10B', '\x10C', 
		'\a', '\f', '\x2', '\x2', '\x10C', '\x10E', '\x5', ' ', '\x11', '\x2', 
		'\x10D', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x111', '\x3', 
		'\x2', '\x2', '\x2', '\x10F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x10F', 
		'\x110', '\x3', '\x2', '\x2', '\x2', '\x110', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x111', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x112', '\x113', 
		'\a', '\x19', '\x2', '\x2', '\x113', '\x114', '\x5', ' ', '\x11', '\x2', 
		'\x114', '/', '\x3', '\x2', '\x2', '\x2', '\x115', '\x119', '\x5', '\x32', 
		'\x1A', '\x2', '\x116', '\x119', '\x5', '\x34', '\x1B', '\x2', '\x117', 
		'\x119', '\x5', '\x36', '\x1C', '\x2', '\x118', '\x115', '\x3', '\x2', 
		'\x2', '\x2', '\x118', '\x116', '\x3', '\x2', '\x2', '\x2', '\x118', '\x117', 
		'\x3', '\x2', '\x2', '\x2', '\x119', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x11B', '\a', '\x1E', '\x2', '\x2', '\x11B', '\x33', '\x3', 
		'\x2', '\x2', '\x2', '\x11C', '\x122', '\a', '\x1F', '\x2', '\x2', '\x11D', 
		'\x11F', '\a', '\x1A', '\x2', '\x2', '\x11E', '\x120', '\a', '\x16', '\x2', 
		'\x2', '\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x121', '\x3', '\x2', '\x2', '\x2', 
		'\x121', '\x123', '\a', '\x1F', '\x2', '\x2', '\x122', '\x11D', '\x3', 
		'\x2', '\x2', '\x2', '\x122', '\x123', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x130', '\x3', '\x2', '\x2', '\x2', '\x124', '\x125', '\a', '\xE', '\x2', 
		'\x2', '\x125', '\x126', '\a', '\x16', '\x2', '\x2', '\x126', '\x12C', 
		'\a', '\x1F', '\x2', '\x2', '\x127', '\x129', '\a', '\x1A', '\x2', '\x2', 
		'\x128', '\x12A', '\a', '\x16', '\x2', '\x2', '\x129', '\x128', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', '\x12A', 
		'\x12B', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12D', '\a', '\x1F', '\x2', 
		'\x2', '\x12C', '\x127', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', '\x3', '\x2', '\x2', '\x2', 
		'\x12E', '\x130', '\a', '\xF', '\x2', '\x2', '\x12F', '\x11C', '\x3', 
		'\x2', '\x2', '\x2', '\x12F', '\x124', '\x3', '\x2', '\x2', '\x2', '\x130', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\x1F', '\x2', 
		'\x2', '\x132', '\x133', '\a', '\x1B', '\x2', '\x2', '\x133', '\x139', 
		'\a', '\x1F', '\x2', '\x2', '\x134', '\x136', '\a', '\x1A', '\x2', '\x2', 
		'\x135', '\x137', '\a', '\x16', '\x2', '\x2', '\x136', '\x135', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', '\x2', '\x137', 
		'\x138', '\x3', '\x2', '\x2', '\x2', '\x138', '\x13A', '\a', '\x1F', '\x2', 
		'\x2', '\x139', '\x134', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', 
		'\x3', '\x2', '\x2', '\x2', '\x13A', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x13B', '\x13C', '\a', '\xE', '\x2', '\x2', '\x13C', '\x13D', '\a', '\x16', 
		'\x2', '\x2', '\x13D', '\x13E', '\a', '\x1F', '\x2', '\x2', '\x13E', '\x13F', 
		'\a', '\x1B', '\x2', '\x2', '\x13F', '\x145', '\a', '\x1F', '\x2', '\x2', 
		'\x140', '\x142', '\a', '\x1A', '\x2', '\x2', '\x141', '\x143', '\a', 
		'\x16', '\x2', '\x2', '\x142', '\x141', '\x3', '\x2', '\x2', '\x2', '\x142', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', '\x3', '\x2', '\x2', 
		'\x2', '\x144', '\x146', '\a', '\x1F', '\x2', '\x2', '\x145', '\x140', 
		'\x3', '\x2', '\x2', '\x2', '\x145', '\x146', '\x3', '\x2', '\x2', '\x2', 
		'\x146', '\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x149', '\a', 
		'\xF', '\x2', '\x2', '\x148', '\x131', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x149', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x14E', '\a', '\x1C', '\x2', '\x2', '\x14B', '\x14E', 
		'\a', '\x1D', '\x2', '\x2', '\x14C', '\x14E', '\x5', ':', '\x1E', '\x2', 
		'\x14D', '\x14A', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14B', '\x3', 
		'\x2', '\x2', '\x2', '\x14D', '\x14C', '\x3', '\x2', '\x2', '\x2', '\x14E', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x14F', '\x150', '\a', '!', '\x2', 
		'\x2', '\x150', ';', '\x3', '\x2', '\x2', '\x2', '\x151', '\x152', '\a', 
		' ', '\x2', '\x2', '\x152', '=', '\x3', '\x2', '\x2', '\x2', ')', '\x41', 
		'V', '_', '\x64', 'j', 'o', 'x', '\x7F', '\x84', '\x8A', '\x8E', '\x97', 
		'\xA3', '\xAA', '\xB9', '\xBE', '\xC2', '\xC7', '\xCC', '\xD5', '\xDA', 
		'\xEB', '\xF0', '\xF3', '\xFE', '\x106', '\x10F', '\x118', '\x11F', '\x122', 
		'\x129', '\x12C', '\x12F', '\x136', '\x139', '\x142', '\x145', '\x148', 
		'\x14D',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Redstar.Parse
